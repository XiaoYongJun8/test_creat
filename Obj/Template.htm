<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Obj\Template.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Obj\Template.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Sat Feb 04 13:36:28 2023
<BR><P>
<H3>Maximum Stack Usage =        592 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
TIM4_IRQHandler &rArr; ADS8688_CollectTask &rArr; averageValueTomA &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[122]">CPU_IntDis</a>
 <LI><a href="#[134]">CPU_IntEn</a>
 <LI><a href="#[1bc]">CPU_SR_Save</a>
 <LI><a href="#[1bd]">CPU_SR_Restore</a>
 <LI><a href="#[15a]">OS_CPU_SR_Save</a>
 <LI><a href="#[15d]">OS_CPU_SR_Restore</a>
 <LI><a href="#[15f]">OSStartHighRdy</a>
 <LI><a href="#[16e]">OSCtxSw</a>
 <LI><a href="#[15c]">OSIntCtxSw</a>
 <LI><a href="#[4e]">PendSV_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[62]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[62]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[62]">ADC1_2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[7f]">ADC3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4a]">BusFault_Handler</a> from stm32f10x_it.o(i.BusFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[65]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[66]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5b]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5c]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5d]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5e]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5f]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[60]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[61]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[88]">DMA2_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[89]">DMA2_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[8a]">DMA2_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[8b]">DMA2_Channel4_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4d]">DebugMon_Handler</a> from stm32f10x_it.o(i.DebugMon_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[56]">EXTI0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[78]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[57]">EXTI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[58]">EXTI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[59]">EXTI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5a]">EXTI4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[67]">EXTI9_5_IRQHandler</a> from exti.o(i.EXTI9_5_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2d]">EnterMemuFiveOptionFour</a> from screendriver.o(i.EnterMemuFiveOptionFour) referenced 2 times from screenshow.o(.data)
 <LI><a href="#[2a]">EnterMemuFiveOptionOne</a> from screendriver.o(i.EnterMemuFiveOptionOne) referenced 2 times from screenshow.o(.data)
 <LI><a href="#[2c]">EnterMemuFiveOptionThree</a> from screendriver.o(i.EnterMemuFiveOptionThree) referenced 2 times from screenshow.o(.data)
 <LI><a href="#[2b]">EnterMemuFiveOptionTwo</a> from screendriver.o(i.EnterMemuFiveOptionTwo) referenced 2 times from screenshow.o(.data)
 <LI><a href="#[38]">EnterMemuFourOptionFive</a> from screendriver.o(i.EnterMemuFourOptionFive) referenced 2 times from screenshow.o(.data)
 <LI><a href="#[37]">EnterMemuFourOptionFour</a> from screendriver.o(i.EnterMemuFourOptionFour) referenced 2 times from screenshow.o(.data)
 <LI><a href="#[34]">EnterMemuFourOptionOne</a> from screendriver.o(i.EnterMemuFourOptionOne) referenced 2 times from screenshow.o(.data)
 <LI><a href="#[36]">EnterMemuFourOptionThree</a> from screendriver.o(i.EnterMemuFourOptionThree) referenced 2 times from screenshow.o(.data)
 <LI><a href="#[35]">EnterMemuFourOptionTwo</a> from screendriver.o(i.EnterMemuFourOptionTwo) referenced 2 times from screenshow.o(.data)
 <LI><a href="#[10]">EnterMemuOneOptionEight</a> from screendriver.o(i.EnterMemuOneOptionEight) referenced 2 times from screenshow.o(.data)
 <LI><a href="#[d]">EnterMemuOneOptionFive</a> from screendriver.o(i.EnterMemuOneOptionFive) referenced 2 times from screenshow.o(.data)
 <LI><a href="#[c]">EnterMemuOneOptionFour</a> from screendriver.o(i.EnterMemuOneOptionFour) referenced 2 times from screenshow.o(.data)
 <LI><a href="#[9]">EnterMemuOneOptionOne</a> from screendriver.o(i.EnterMemuOneOptionOne) referenced 2 times from screenshow.o(.data)
 <LI><a href="#[f]">EnterMemuOneOptionSeven</a> from screendriver.o(i.EnterMemuOneOptionSeven) referenced 2 times from screenshow.o(.data)
 <LI><a href="#[e]">EnterMemuOneOptionSix</a> from screendriver.o(i.EnterMemuOneOptionSix) referenced 2 times from screenshow.o(.data)
 <LI><a href="#[b]">EnterMemuOneOptionThree</a> from screendriver.o(i.EnterMemuOneOptionThree) referenced 2 times from screenshow.o(.data)
 <LI><a href="#[a]">EnterMemuOneOptionTwo</a> from screendriver.o(i.EnterMemuOneOptionTwo) referenced 2 times from screenshow.o(.data)
 <LI><a href="#[44]">EnterMemuSixOptionFive</a> from screendriver.o(i.EnterMemuSixOptionFive) referenced 2 times from screenshow.o(.data)
 <LI><a href="#[43]">EnterMemuSixOptionFour</a> from screendriver.o(i.EnterMemuSixOptionFour) referenced 2 times from screenshow.o(.data)
 <LI><a href="#[40]">EnterMemuSixOptionOne</a> from screendriver.o(i.EnterMemuSixOptionOne) referenced 2 times from screenshow.o(.data)
 <LI><a href="#[45]">EnterMemuSixOptionSix</a> from screendriver.o(i.EnterMemuSixOptionSix) referenced 2 times from screenshow.o(.data)
 <LI><a href="#[42]">EnterMemuSixOptionThree</a> from screendriver.o(i.EnterMemuSixOptionThree) referenced 2 times from screenshow.o(.data)
 <LI><a href="#[41]">EnterMemuSixOptionTwo</a> from screendriver.o(i.EnterMemuSixOptionTwo) referenced 2 times from screenshow.o(.data)
 <LI><a href="#[24]">EnterMemuThreeOptionFour</a> from screendriver.o(i.EnterMemuThreeOptionFour) referenced 2 times from screenshow.o(.data)
 <LI><a href="#[21]">EnterMemuThreeOptionOne</a> from screendriver.o(i.EnterMemuThreeOptionOne) referenced 2 times from screenshow.o(.data)
 <LI><a href="#[23]">EnterMemuThreeOptionThree</a> from screendriver.o(i.EnterMemuThreeOptionThree) referenced 2 times from screenshow.o(.data)
 <LI><a href="#[22]">EnterMemuThreeOptionTwo</a> from screendriver.o(i.EnterMemuThreeOptionTwo) referenced 2 times from screenshow.o(.data)
 <LI><a href="#[1b]">EnterMemuTwoOptionFive</a> from screendriver.o(i.EnterMemuTwoOptionFive) referenced 2 times from screenshow.o(.data)
 <LI><a href="#[1a]">EnterMemuTwoOptionFour</a> from screendriver.o(i.EnterMemuTwoOptionFour) referenced 2 times from screenshow.o(.data)
 <LI><a href="#[17]">EnterMemuTwoOptionOne</a> from screendriver.o(i.EnterMemuTwoOptionOne) referenced 2 times from screenshow.o(.data)
 <LI><a href="#[19]">EnterMemuTwoOptionThree</a> from screendriver.o(i.EnterMemuTwoOptionThree) referenced 2 times from screenshow.o(.data)
 <LI><a href="#[18]">EnterMemuTwoOptionTwo</a> from screendriver.o(i.EnterMemuTwoOptionTwo) referenced 2 times from screenshow.o(.data)
 <LI><a href="#[54]">FLASH_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[80]">FSMC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[48]">HardFault_Handler</a> from stm32f10x_it.o(i.HardFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[70]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[6f]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[72]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[71]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[49]">MemManage_Handler</a> from stm32f10x_it.o(i.MemManage_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[25]">MemuFive</a> from screendriver.o(i.MemuFive) referenced 2 times from screenshow.o(.data)
 <LI><a href="#[29]">MemuFiveOptionFour</a> from screendriver.o(i.MemuFiveOptionFour) referenced 2 times from screenshow.o(.data)
 <LI><a href="#[26]">MemuFiveOptionOne</a> from screendriver.o(i.MemuFiveOptionOne) referenced 2 times from screenshow.o(.data)
 <LI><a href="#[28]">MemuFiveOptionThree</a> from screendriver.o(i.MemuFiveOptionThree) referenced 2 times from screenshow.o(.data)
 <LI><a href="#[27]">MemuFiveOptionTwo</a> from screendriver.o(i.MemuFiveOptionTwo) referenced 2 times from screenshow.o(.data)
 <LI><a href="#[2e]">MemuFour</a> from screendriver.o(i.MemuFour) referenced 2 times from screenshow.o(.data)
 <LI><a href="#[33]">MemuFourOptionFive</a> from screendriver.o(i.MemuFourOptionFive) referenced 2 times from screenshow.o(.data)
 <LI><a href="#[32]">MemuFourOptionFour</a> from screendriver.o(i.MemuFourOptionFour) referenced 2 times from screenshow.o(.data)
 <LI><a href="#[2f]">MemuFourOptionOne</a> from screendriver.o(i.MemuFourOptionOne) referenced 2 times from screenshow.o(.data)
 <LI><a href="#[31]">MemuFourOptionThree</a> from screendriver.o(i.MemuFourOptionThree) referenced 2 times from screenshow.o(.data)
 <LI><a href="#[30]">MemuFourOptionTwo</a> from screendriver.o(i.MemuFourOptionTwo) referenced 2 times from screenshow.o(.data)
 <LI><a href="#[0]">MemuOne</a> from screendriver.o(i.MemuOne) referenced 2 times from screenshow.o(.data)
 <LI><a href="#[8]">MemuOneOptionEight</a> from screendriver.o(i.MemuOneOptionEight) referenced 2 times from screenshow.o(.data)
 <LI><a href="#[5]">MemuOneOptionFive</a> from screendriver.o(i.MemuOneOptionFive) referenced 2 times from screenshow.o(.data)
 <LI><a href="#[4]">MemuOneOptionFour</a> from screendriver.o(i.MemuOneOptionFour) referenced 2 times from screenshow.o(.data)
 <LI><a href="#[1]">MemuOneOptionOne</a> from screendriver.o(i.MemuOneOptionOne) referenced 2 times from screenshow.o(.data)
 <LI><a href="#[7]">MemuOneOptionSeven</a> from screendriver.o(i.MemuOneOptionSeven) referenced 2 times from screenshow.o(.data)
 <LI><a href="#[6]">MemuOneOptionSix</a> from screendriver.o(i.MemuOneOptionSix) referenced 2 times from screenshow.o(.data)
 <LI><a href="#[3]">MemuOneOptionThree</a> from screendriver.o(i.MemuOneOptionThree) referenced 2 times from screenshow.o(.data)
 <LI><a href="#[2]">MemuOneOptionTwo</a> from screendriver.o(i.MemuOneOptionTwo) referenced 2 times from screenshow.o(.data)
 <LI><a href="#[39]">MemuSix</a> from screendriver.o(i.MemuSix) referenced 2 times from screenshow.o(.data)
 <LI><a href="#[3e]">MemuSixOptionFive</a> from screendriver.o(i.MemuSixOptionFive) referenced 2 times from screenshow.o(.data)
 <LI><a href="#[3d]">MemuSixOptionFour</a> from screendriver.o(i.MemuSixOptionFour) referenced 2 times from screenshow.o(.data)
 <LI><a href="#[3a]">MemuSixOptionOne</a> from screendriver.o(i.MemuSixOptionOne) referenced 2 times from screenshow.o(.data)
 <LI><a href="#[3f]">MemuSixOptionSix</a> from screendriver.o(i.MemuSixOptionSix) referenced 2 times from screenshow.o(.data)
 <LI><a href="#[3c]">MemuSixOptionThree</a> from screendriver.o(i.MemuSixOptionThree) referenced 2 times from screenshow.o(.data)
 <LI><a href="#[3b]">MemuSixOptionTwo</a> from screendriver.o(i.MemuSixOptionTwo) referenced 2 times from screenshow.o(.data)
 <LI><a href="#[1c]">MemuThree</a> from screendriver.o(i.MemuThree) referenced 2 times from screenshow.o(.data)
 <LI><a href="#[20]">MemuThreeOptionFour</a> from screendriver.o(i.MemuThreeOptionFour) referenced 2 times from screenshow.o(.data)
 <LI><a href="#[1d]">MemuThreeOptionOne</a> from screendriver.o(i.MemuThreeOptionOne) referenced 2 times from screenshow.o(.data)
 <LI><a href="#[1f]">MemuThreeOptionThree</a> from screendriver.o(i.MemuThreeOptionThree) referenced 2 times from screenshow.o(.data)
 <LI><a href="#[1e]">MemuThreeOptionTwo</a> from screendriver.o(i.MemuThreeOptionTwo) referenced 2 times from screenshow.o(.data)
 <LI><a href="#[11]">MemuTwo</a> from screendriver.o(i.MemuTwo) referenced 2 times from screenshow.o(.data)
 <LI><a href="#[16]">MemuTwoOptionFive</a> from screendriver.o(i.MemuTwoOptionFive) referenced 2 times from screenshow.o(.data)
 <LI><a href="#[15]">MemuTwoOptionFour</a> from screendriver.o(i.MemuTwoOptionFour) referenced 2 times from screenshow.o(.data)
 <LI><a href="#[12]">MemuTwoOptionOne</a> from screendriver.o(i.MemuTwoOptionOne) referenced 2 times from screenshow.o(.data)
 <LI><a href="#[14]">MemuTwoOptionThree</a> from screendriver.o(i.MemuTwoOptionThree) referenced 2 times from screenshow.o(.data)
 <LI><a href="#[13]">MemuTwoOptionTwo</a> from screendriver.o(i.MemuTwoOptionTwo) referenced 2 times from screenshow.o(.data)
 <LI><a href="#[47]">NMI_Handler</a> from stm32f10x_it.o(i.NMI_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[90]">OSIntExit</a> from os_core.o(i.OSIntExit) referenced from os_cpu_a.o(.text)
 <LI><a href="#[8f]">OSTaskSwHook</a> from os_cpu_c.o(i.OSTaskSwHook) referenced from os_cpu_a.o(.text)
 <LI><a href="#[91]">OS_TaskIdle</a> from os_core.o(i.OS_TaskIdle) referenced from os_core.o(i.OS_InitTaskIdle)
 <LI><a href="#[92]">OS_TaskStat</a> from os_core.o(i.OS_TaskStat) referenced from os_core.o(i.OS_InitTaskStat)
 <LI><a href="#[51]">PVD_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4e]">PendSV_Handler</a> from os_cpu_a.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[55]">RCC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[79]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[53]">RTC_IRQHandler</a> from rtc.o(i.RTC_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[46]">Reset_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[81]">SDIO_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[73]">SPI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[74]">SPI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[83]">SPI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4c]">SVC_Handler</a> from stm32f10x_it.o(i.SVC_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4f]">SysTick_Handler</a> from systick.o(i.SysTick_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[8d]">SystemInit</a> from system_stm32f10x.o(i.SystemInit) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[52]">TAMPER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[68]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[6b]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[6a]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[69]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[6c]">TIM2_IRQHandler</a> from rs485.o(i.TIM2_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[6d]">TIM3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[6e]">TIM4_IRQHandler</a> from rs485.o(i.TIM4_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[82]">TIM5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[86]">TIM6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[87]">TIM7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[7b]">TIM8_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[7e]">TIM8_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[7d]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[7c]">TIM8_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[94]">TaskDog</a> from iwdg.o(i.TaskDog) referenced from main.o(i.TaskStart)
 <LI><a href="#[93]">TaskKeyControl</a> from screenshow.o(i.TaskKeyControl) referenced from main.o(i.TaskStart)
 <LI><a href="#[96]">TaskStart</a> from main.o(i.TaskStart) referenced from main.o(i.main)
 <LI><a href="#[84]">UART4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[85]">UART5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[75]">USART1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[76]">USART2_IRQHandler</a> from rs485.o(i.USART2_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[77]">USART3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[7a]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[63]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[64]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4b]">UsageFault_Handler</a> from stm32f10x_it.o(i.UsageFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[50]">WWDG_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[8e]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[95]">fputc</a> from uart.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[8c]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[8e]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[1b5]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[97]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[e3]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1b6]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[1b7]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[1b8]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[1b9]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))

<P><STRONG><a name="[1ba]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[1bb]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[46]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[122]"></a>CPU_IntDis</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTarget
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1Write
</UL>

<P><STRONG><a name="[134]"></a>CPU_IntEn</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTarget
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1Write
</UL>

<P><STRONG><a name="[1bc]"></a>CPU_SR_Save</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[1bd]"></a>CPU_SR_Restore</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[15a]"></a>OS_CPU_SR_Save</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>

<P><STRONG><a name="[15d]"></a>OS_CPU_SR_Restore</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>

<P><STRONG><a name="[15f]"></a>OSStartHighRdy</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
</UL>

<P><STRONG><a name="[16e]"></a>OSCtxSw</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[15c]"></a>OSIntCtxSw</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>

<P><STRONG><a name="[4e]"></a>PendSV_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[101]"></a>CH374GetVer</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, CH374MAI.O(.text))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374LibInit
</UL>

<P><STRONG><a name="[bc]"></a>CH374s01</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, CH374MAI.O(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s08
</UL>

<P><STRONG><a name="[99]"></a>CH374DelaymS</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, CH374MAI.O(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_READ_REGISTER
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DiskReady
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s22
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s25
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s13
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s21
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374CtrlTransfer
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s26
</UL>

<P><STRONG><a name="[9d]"></a>CH374EmbHubAttach</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, CH374MAI.O(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_READ_REGISTER
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DiskConnect
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s22
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s13
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374HostTransact
</UL>

<P><STRONG><a name="[9e]"></a>CH374HostTransact</STRONG> (Thumb, 310 bytes, Stack size 24 bytes, CH374MAI.O(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueryInterrupt
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_WRITE_REGISTER
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_READ_REGISTER
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374EmbHubAttach
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s07
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s06
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s18
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374BulkOnlyCmd
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374CtrlTransfer
</UL>

<P><STRONG><a name="[a1]"></a>CH374DirtyBuffer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, CH374MAI.O(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374FileCreate
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s08
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s07
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s06
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374BulkOnlyCmd
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374CtrlTransfer
</UL>

<P><STRONG><a name="[a0]"></a>CH374CtrlTransfer</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, CH374MAI.O(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DelaymS
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_WRITE_REGISTER
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_READ_REGISTER
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_READ_BLOCK
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DirtyBuffer
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374HostTransact
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DiskConnect
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s22
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s21
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s23
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s30
</UL>

<P><STRONG><a name="[a3]"></a>CH374DiskConnect</STRONG> (Thumb, 270 bytes, Stack size 16 bytes, CH374MAI.O(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_WRITE_REGISTER
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_READ_REGISTER
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374CtrlTransfer
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374EmbHubAttach
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s30
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s31
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s29
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DiskReady
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s22
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s21
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s05
</UL>

<P><STRONG><a name="[a6]"></a>CH374s05</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, CH374MAI.O(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DiskConnect
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374FileOpen
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374FileCreate
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374FileClose
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374FileErase
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s08
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s22
</UL>

<P><STRONG><a name="[a7]"></a>CH374Init</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, CH374MAI.O(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CH374Init &rArr; CH374s29 &rArr; CH374_WRITE_REGISTER &rArr; Spi374Start &rArr; SPI3_TransByte
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_WRITE_REGISTER
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_READ_REGISTER
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s29
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374LibInit
</UL>

<P><STRONG><a name="[a8]"></a>CH374EmbHubEnable</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, CH374MAI.O(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_WRITE_REGISTER
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_READ_REGISTER
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s22
</UL>

<P><STRONG><a name="[a9]"></a>CH374s23</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, CH374MAI.O(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_WRITE_REGISTER
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_WRITE_BLOCK_C
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374CtrlTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s22
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s07
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s06
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374BulkOnlyCmd
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s21
</UL>

<P><STRONG><a name="[ab]"></a>CH374s21</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, CH374MAI.O(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DiskConnect
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DelaymS
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_WRITE_REGISTER
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_WRITE_BLOCK_C
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s23
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374CtrlTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s08
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s07
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s06
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374BulkOnlyCmd
</UL>

<P><STRONG><a name="[ac]"></a>CH374s17</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, CH374MAI.O(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_WRITE_REGISTER
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s06
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374BulkOnlyCmd
</UL>

<P><STRONG><a name="[ad]"></a>CH374BulkOnlyCmd</STRONG> (Thumb, 276 bytes, Stack size 24 bytes, CH374MAI.O(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_WRITE_REGISTER
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_WRITE_BLOCK_C
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_WRITE_BLOCK
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_READ_REGISTER
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_READ_BLOCK
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s17
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s21
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s23
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DirtyBuffer
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374HostTransact
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DiskReady
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s22
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s25
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s13
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s26
</UL>

<P><STRONG><a name="[af]"></a>CH374s13</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, CH374MAI.O(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DelaymS
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_WRITE_REGISTER
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374BulkOnlyCmd
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374EmbHubAttach
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s27
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s29
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DiskReady
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s22
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s07
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s06
</UL>

<P><STRONG><a name="[b4]"></a>mReturnErrClose</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, CH374MAI.O(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s07
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s06
</UL>

<P><STRONG><a name="[b1]"></a>CH374s18</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, CH374MAI.O(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_WRITE_REGISTER
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_WRITE_BLOCK_C
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_WRITE_BLOCK
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374HostTransact
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s07
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s06
</UL>

<P><STRONG><a name="[b2]"></a>CH374s06</STRONG> (Thumb, 358 bytes, Stack size 24 bytes, CH374MAI.O(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_WRITE_REGISTER
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_READ_REGISTER
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_READ_BLOCK64
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s18
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mReturnErrClose
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s13
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s17
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s21
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s23
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DirtyBuffer
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374HostTransact
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374FileOpen
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374FileModify
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374FileCreate
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s20
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374FileErase
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s15
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s12
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s10
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s08
</UL>

<P><STRONG><a name="[b5]"></a>CH374s07</STRONG> (Thumb, 364 bytes, Stack size 24 bytes, CH374MAI.O(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xDelayAfterWrite
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_WRITE_REGISTER
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_WRITE_BLOCK64
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_READ_REGISTER
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s18
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mReturnErrClose
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s13
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s21
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s23
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DirtyBuffer
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374HostTransact
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374FileModify
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374FileCreate
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s20
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374FileErase
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s15
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s12
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s09
</UL>

<P><STRONG><a name="[b8]"></a>CH374s25</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, CH374MAI.O(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DelaymS
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374BulkOnlyCmd
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s26
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s27
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DiskReady
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s08
</UL>

<P><STRONG><a name="[ba]"></a>CH374s22</STRONG> (Thumb, 948 bytes, Stack size 24 bytes, CH374MAI.O(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DiskConnect
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DelaymS
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_WRITE_REGISTER
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_WRITE_BLOCK_C
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_READ_REGISTER
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s13
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374BulkOnlyCmd
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s23
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374EmbHubEnable
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s05
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374CtrlTransfer
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374EmbHubAttach
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s30
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s31
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s27
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DiskReady
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s08
</UL>

<P><STRONG><a name="[bb]"></a>CH374s08</STRONG> (Thumb, 614 bytes, Stack size 24 bytes, CH374MAI.O(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s22
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s25
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s06
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s21
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s05
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DirtyBuffer
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s01
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s02
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374FileOpen
</UL>

<P><STRONG><a name="[be]"></a>CH374s09</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, CH374MAI.O(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s07
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374FileCreate
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s20
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374FileErase
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s10
</UL>

<P><STRONG><a name="[bf]"></a>CH374s10</STRONG> (Thumb, 496 bytes, Stack size 24 bytes, CH374MAI.O(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s09
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s06
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374FileOpen
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374FileCreate
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s19
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374FileErase
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s32
</UL>

<P><STRONG><a name="[c0]"></a>CH374s32</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, CH374MAI.O(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s10
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s20
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s11
</UL>

<P><STRONG><a name="[c1]"></a>CH374s11</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, CH374MAI.O(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s32
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374FileCreate
</UL>

<P><STRONG><a name="[c2]"></a>CH374s12</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, CH374MAI.O(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s07
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s06
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374FileCreate
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374FileErase
</UL>

<P><STRONG><a name="[c3]"></a>CH374FileOpen</STRONG> (Thumb, 748 bytes, Stack size 24 bytes, CH374MAI.O(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xFileNameEnumer
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s10
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s08
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s06
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s05
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374FileCreate
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374FileErase
</UL>

<P><STRONG><a name="[c5]"></a>CH374s15</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, CH374MAI.O(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s07
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s06
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374FileClose
</UL>

<P><STRONG><a name="[c6]"></a>CH374FileClose</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, CH374MAI.O(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s15
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s05
</UL>

<P><STRONG><a name="[c7]"></a>CH374FileErase</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, CH374MAI.O(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374FileOpen
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s12
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s10
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s09
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s07
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s06
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s05
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374FileCreate
</UL>

<P><STRONG><a name="[c9]"></a>CH374s14</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, CH374MAI.O(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374FileCreate
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s19
</UL>

<P><STRONG><a name="[c8]"></a>CH374FileCreate</STRONG> (Thumb, 454 bytes, Stack size 24 bytes, CH374MAI.O(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374FileOpen
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_READ_REGISTER
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s14
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374FileErase
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s12
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s11
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s10
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s09
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s07
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s06
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s05
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DirtyBuffer
</UL>

<P><STRONG><a name="[ca]"></a>CH374FileModify</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, CH374MAI.O(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s07
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s06
</UL>

<P><STRONG><a name="[cb]"></a>CH374DiskReady</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, CH374MAI.O(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DiskConnect
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DelaymS
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s22
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s25
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s13
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374BulkOnlyCmd
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s26
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s27
</UL>

<P><STRONG><a name="[cc]"></a>CH374s19</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, CH374MAI.O(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s14
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s10
</UL>

<P><STRONG><a name="[cd]"></a>CH374s20</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, CH374MAI.O(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s32
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s09
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s07
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s06
</UL>

<P><STRONG><a name="[cf]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[1be]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1bf]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[ce]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[190]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBoltGradeValVarFlag
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBoltGardeMeterArr
</UL>

<P><STRONG><a name="[1c0]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[d0]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[192]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBoltGradeValVarFlag
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBoltGardeMeterArr
</UL>

<P><STRONG><a name="[191]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBoltGardeMeterArr
</UL>

<P><STRONG><a name="[1b2]"></a>__aeabi_fmul</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getOutData
</UL>

<P><STRONG><a name="[d1]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSensorPresetTorValVarFlag
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getOutData
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuTwo
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuThree
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuSix
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuFour
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuFive
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModiVarDecWide
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModiVarDec
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModiVarAddWide
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModiVarAdd
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[d6]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mAValueToPressVal
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mAValueToFlowVal
</UL>

<P><STRONG><a name="[d7]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[d8]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSensorPresetTorValVarFlag
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuTwo
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuFour
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTargetTorqueValVarFlag
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModiVarDecWide
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModiVarDec
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModiVarAddWide
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModiVarAdd
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mAValueToPressVal
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mAValueToFlowVal
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;averageValueTomA
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[d9]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getOutData
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuTwo
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuThree
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuSix
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuFour
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuFive
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModiVarDecWide
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModiVarDec
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModiVarAddWide
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModiVarAdd
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;averageValueTomA
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[da]"></a>__aeabi_ui2f</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuSix
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuFive
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS8688_CollectTask
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPressValue
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModiVarDecWide
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModiVarDec
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModiVarAddWide
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModiVarAdd
</UL>

<P><STRONG><a name="[dc]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSensorPresetTorValVarFlag
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getOutData
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuTwo
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuThree
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuSix
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuFour
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuFive
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTargetTorqueValVarFlag
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModiVarDecWide
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModiVarDec
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModiVarAddWide
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModiVarAdd
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;averageValueTomA
</UL>

<P><STRONG><a name="[e8]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSensorPresetTorValVarFlag
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getOutData
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS8688_CollectTask
</UL>

<P><STRONG><a name="[dd]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSensorPresetTorValVarFlag
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuTwo
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuThree
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuSix
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuFour
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuFive
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTargetTorqueValVarFlag
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModiVarDecWide
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModiVarDec
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModiVarAddWide
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModiVarAdd
</UL>

<P><STRONG><a name="[133]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTarget
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getOutData
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mAValueToPressVal
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mAValueToFlowVal
</UL>

<P><STRONG><a name="[1c1]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[1b3]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTargetTorqueValVarFlag
</UL>

<P><STRONG><a name="[13d]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSensorPresetTorValVarFlag
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getOutData
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuTwo
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuThree
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuSix
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuFour
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuFive
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTargetTorqueValVarFlag
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModiVarDecWide
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModiVarDec
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModiVarAddWide
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModiVarAdd
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[df]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getOutData
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mAValueToPressVal
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mAValueToFlowVal
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;averageValueTomA
</UL>

<P><STRONG><a name="[13e]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cfcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuThree
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuSix
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuFive
</UL>

<P><STRONG><a name="[1c2]"></a>__aeabi_cfcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfcmple.o(.text), UNUSED)

<P><STRONG><a name="[1c3]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[1b1]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[e1]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[d2]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[1c4]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[de]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[1c5]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[d3]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[1c6]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[1c7]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[e0]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[db]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>

<P><STRONG><a name="[d5]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[d4]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[e2]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[98]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1c8]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[1c9]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1ca]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[e4]"></a>ADS8688_CollectTask</STRONG> (Thumb, 328 bytes, Stack size 48 bytes, ads8688.o(i.ADS8688_CollectTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = ADS8688_CollectTask &rArr; averageValueTomA &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_AUTO_RST_Mode_Data
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mAValueToPressVal
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mAValueToFlowVal
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mAValueToAngleVal
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;averageValue_Fillter
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;averageValueTomA
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
</UL>

<P><STRONG><a name="[ec]"></a>ADS8688_IO_Init</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, ads8688.o(i.ADS8688_IO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ADS8688_IO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS8688_Init
</UL>

<P><STRONG><a name="[f0]"></a>ADS8688_Init</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, ads8688.o(i.ADS8688_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ADS8688_Init &rArr; Set_Auto_Scan_Sequence &rArr; ADS8688_WriteReg &rArr; ADS8688_SPI_Write8Bit
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Auto_Scan_Sequence
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_RESET
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS8688_WriteReg
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS8688_ReadReg
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS8688_IO_Init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTarget
</UL>

<P><STRONG><a name="[f4]"></a>ADS8688_ReadReg</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ads8688.o(i.ADS8688_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ADS8688_ReadReg &rArr; ADS8688_SPI_Write8Bit
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS8688_SPI_Write8Bit
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS8688_SPI_Read8Bit
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS8688_Init
</UL>

<P><STRONG><a name="[f8]"></a>ADS8688_SPI_Read8Bit</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ads8688.o(i.ADS8688_SPI_Read8Bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADS8688_SPI_Read8Bit
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_AUTO_RST_Mode_Data
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS8688_ReadReg
</UL>

<P><STRONG><a name="[f7]"></a>ADS8688_SPI_Write8Bit</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ads8688.o(i.ADS8688_SPI_Write8Bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADS8688_SPI_Write8Bit
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_AUTO_RST_Mode_Data
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS8688_WriteReg
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS8688_WriteCmd
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS8688_ReadReg
</UL>

<P><STRONG><a name="[fa]"></a>ADS8688_WriteCmd</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ads8688.o(i.ADS8688_WriteCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADS8688_WriteCmd &rArr; ADS8688_SPI_Write8Bit
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS8688_SPI_Write8Bit
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_RESET
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTO_RST_Mode
</UL>

<P><STRONG><a name="[f3]"></a>ADS8688_WriteReg</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ads8688.o(i.ADS8688_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ADS8688_WriteReg &rArr; ADS8688_SPI_Write8Bit
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS8688_SPI_Write8Bit
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CH_Range
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Auto_Scan_Sequence
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS8688_Init
</UL>

<P><STRONG><a name="[fb]"></a>AUTO_RST_Mode</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ads8688.o(i.AUTO_RST_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AUTO_RST_Mode &rArr; ADS8688_WriteCmd &rArr; ADS8688_SPI_Write8Bit
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS8688_WriteCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTarget
</UL>

<P><STRONG><a name="[fc]"></a>BKP_DeInit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f10x_bkp.o(i.BKP_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BKP_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_BackupResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[183]"></a>BKP_ReadBackupRegister</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f10x_bkp.o(i.BKP_ReadBackupRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BKP_ReadBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[18e]"></a>BKP_WriteBackupRegister</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f10x_bkp.o(i.BKP_WriteBackupRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BKP_WriteBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[fe]"></a>Beep_Init</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, led.o(i.Beep_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Beep_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTarget
</UL>

<P><STRONG><a name="[4a]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[100]"></a>CH374LibInit</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ch374drv.o(i.CH374LibInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CH374LibInit &rArr; CH374Init &rArr; CH374s29 &rArr; CH374_WRITE_REGISTER &rArr; Spi374Start &rArr; SPI3_TransByte
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374Init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374GetVer
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTarget
</UL>

<P><STRONG><a name="[102]"></a>CH374_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ch374drv.o(i.CH374_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CH374_Init &rArr; SPI2_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_WRITE_REGISTER
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_READ_REGISTER
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTarget
</UL>

<P><STRONG><a name="[a2]"></a>CH374_READ_BLOCK</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ch374drv.o(i.CH374_READ_BLOCK), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi374Stop
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi374Start
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_TransByte
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374BulkOnlyCmd
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374CtrlTransfer
</UL>

<P><STRONG><a name="[b3]"></a>CH374_READ_BLOCK64</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ch374drv.o(i.CH374_READ_BLOCK64), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi374Stop
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi374Start
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_TransByte
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s06
</UL>

<P><STRONG><a name="[9a]"></a>CH374_READ_REGISTER</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ch374drv.o(i.CH374_READ_REGISTER))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CH374_READ_REGISTER &rArr; Spi374Start &rArr; SPI3_TransByte
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi374Stop
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi374Start
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_TransByte
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374Init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374FileCreate
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DiskConnect
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DelaymS
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s22
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s07
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s06
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374BulkOnlyCmd
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374EmbHubEnable
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374CtrlTransfer
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374HostTransact
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374EmbHubAttach
</UL>

<P><STRONG><a name="[ae]"></a>CH374_WRITE_BLOCK</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ch374drv.o(i.CH374_WRITE_BLOCK), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi374Stop
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi374Start
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_TransByte
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s18
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374BulkOnlyCmd
</UL>

<P><STRONG><a name="[b6]"></a>CH374_WRITE_BLOCK64</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ch374drv.o(i.CH374_WRITE_BLOCK64), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi374Stop
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi374Start
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_TransByte
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s07
</UL>

<P><STRONG><a name="[aa]"></a>CH374_WRITE_BLOCK_C</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ch374drv.o(i.CH374_WRITE_BLOCK_C), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi374Stop
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi374Start
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_TransByte
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s22
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s18
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374BulkOnlyCmd
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s21
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s23
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s30
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s31
</UL>

<P><STRONG><a name="[9c]"></a>CH374_WRITE_REGISTER</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ch374drv.o(i.CH374_WRITE_REGISTER))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CH374_WRITE_REGISTER &rArr; Spi374Start &rArr; SPI3_TransByte
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi374Stop
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi374Start
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_TransByte
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374Init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DiskConnect
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s22
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s07
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s06
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s18
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s13
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374BulkOnlyCmd
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s17
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s21
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s23
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374EmbHubEnable
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374CtrlTransfer
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374HostTransact
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s30
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s31
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s29
</UL>

<P><STRONG><a name="[107]"></a>DAC8771_Init</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, dac8771.o(i.DAC8771_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = DAC8771_Init &rArr; DAC8771_init &rArr; DAC8771_Read_CMD &rArr; DAC8771_WRITE_CMD
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC8771_init
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTarget
</UL>

<P><STRONG><a name="[109]"></a>DAC8771_Read_CMD</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, dac8771.o(i.DAC8771_Read_CMD))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DAC8771_Read_CMD &rArr; DAC8771_WRITE_CMD
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC8771_WRITE_CMD
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC8771_init
</UL>

<P><STRONG><a name="[10a]"></a>DAC8771_WRITE_CMD</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, dac8771.o(i.DAC8771_WRITE_CMD))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DAC8771_WRITE_CMD
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC8771_init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC8771_Read_CMD
</UL>

<P><STRONG><a name="[108]"></a>DAC8771_init</STRONG> (Thumb, 326 bytes, Stack size 96 bytes, dac8771.o(i.DAC8771_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = DAC8771_init &rArr; DAC8771_Read_CMD &rArr; DAC8771_WRITE_CMD
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC8771_WRITE_CMD
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC8771_Read_CMD
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC8771_Init
</UL>

<P><STRONG><a name="[10c]"></a>DAC_RESAT_PIN</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, led.o(i.DAC_RESAT_PIN))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DAC_RESAT_PIN &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTarget
</UL>

<P><STRONG><a name="[110]"></a>DMA_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Configuration
</UL>

<P><STRONG><a name="[111]"></a>DMA_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Configuration
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1Write
</UL>

<P><STRONG><a name="[10d]"></a>DMA_Configuration</STRONG> (Thumb, 264 bytes, Stack size 48 bytes, dma.o(i.DMA_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DMA_Configuration &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[10e]"></a>DMA_DeInit</STRONG> (Thumb, 324 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Configuration
</UL>

<P><STRONG><a name="[10f]"></a>DMA_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_dma.o(i.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Configuration
</UL>

<P><STRONG><a name="[4d]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 312 bytes, Stack size 8 bytes, exti.o(i.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = EXTI9_5_IRQHandler &rArr; ModiVarDec &rArr; setSensorPresetTorValVarFlag &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModiVarDecWide
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModiVarDec
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModiVarAddWide
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModiVarAdd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[117]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[112]"></a>EXTI_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[136]"></a>EXTI_Init</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_Init))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Input_Init
</UL>

<P><STRONG><a name="[2d]"></a>EnterMemuFiveOptionFour</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, screendriver.o(i.EnterMemuFiveOptionFour))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EnterMemuFiveOptionFour &rArr; SetflashTime &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetflashTime
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScreen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screenshow.o(.data)
</UL>
<P><STRONG><a name="[2a]"></a>EnterMemuFiveOptionOne</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, screendriver.o(i.EnterMemuFiveOptionOne))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EnterMemuFiveOptionOne &rArr; SetflashTime &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetflashTime
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScreen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screenshow.o(.data)
</UL>
<P><STRONG><a name="[2c]"></a>EnterMemuFiveOptionThree</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, screendriver.o(i.EnterMemuFiveOptionThree))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EnterMemuFiveOptionThree &rArr; SetflashTime &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetflashTime
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScreen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screenshow.o(.data)
</UL>
<P><STRONG><a name="[2b]"></a>EnterMemuFiveOptionTwo</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, screendriver.o(i.EnterMemuFiveOptionTwo))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EnterMemuFiveOptionTwo &rArr; SetflashTime &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetflashTime
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScreen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screenshow.o(.data)
</UL>
<P><STRONG><a name="[38]"></a>EnterMemuFourOptionFive</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, screendriver.o(i.EnterMemuFourOptionFive))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EnterMemuFourOptionFive &rArr; SetflashTime &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetflashTime
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScreen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screenshow.o(.data)
</UL>
<P><STRONG><a name="[37]"></a>EnterMemuFourOptionFour</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, screendriver.o(i.EnterMemuFourOptionFour))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EnterMemuFourOptionFour &rArr; SetflashTime &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetflashTime
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScreen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screenshow.o(.data)
</UL>
<P><STRONG><a name="[34]"></a>EnterMemuFourOptionOne</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, screendriver.o(i.EnterMemuFourOptionOne))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EnterMemuFourOptionOne &rArr; SetflashTime &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetflashTime
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScreen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screenshow.o(.data)
</UL>
<P><STRONG><a name="[36]"></a>EnterMemuFourOptionThree</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, screendriver.o(i.EnterMemuFourOptionThree))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EnterMemuFourOptionThree &rArr; SetflashTime &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetflashTime
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScreen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screenshow.o(.data)
</UL>
<P><STRONG><a name="[35]"></a>EnterMemuFourOptionTwo</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, screendriver.o(i.EnterMemuFourOptionTwo))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EnterMemuFourOptionTwo &rArr; SetflashTime &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetflashTime
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScreen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screenshow.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>EnterMemuOneOptionEight</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, screendriver.o(i.EnterMemuOneOptionEight))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EnterMemuOneOptionEight &rArr; SetflashTime &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetflashTime
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScreen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screenshow.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>EnterMemuOneOptionFive</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, screendriver.o(i.EnterMemuOneOptionFive))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EnterMemuOneOptionFive &rArr; SetflashTime &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetflashTime
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScreen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screenshow.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>EnterMemuOneOptionFour</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, screendriver.o(i.EnterMemuOneOptionFour))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EnterMemuOneOptionFour &rArr; SetflashTime &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetflashTime
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScreen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screenshow.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>EnterMemuOneOptionOne</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, screendriver.o(i.EnterMemuOneOptionOne))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EnterMemuOneOptionOne &rArr; SetflashTime &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetflashTime
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScreen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screenshow.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>EnterMemuOneOptionSeven</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, screendriver.o(i.EnterMemuOneOptionSeven))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EnterMemuOneOptionSeven &rArr; SetflashTime &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetflashTime
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScreen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screenshow.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>EnterMemuOneOptionSix</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, screendriver.o(i.EnterMemuOneOptionSix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EnterMemuOneOptionSix &rArr; SetflashTime &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetflashTime
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScreen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screenshow.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>EnterMemuOneOptionThree</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, screendriver.o(i.EnterMemuOneOptionThree))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EnterMemuOneOptionThree &rArr; SetflashTime &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetflashTime
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScreen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screenshow.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>EnterMemuOneOptionTwo</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, screendriver.o(i.EnterMemuOneOptionTwo))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EnterMemuOneOptionTwo &rArr; SetflashTime &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetflashTime
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScreen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screenshow.o(.data)
</UL>
<P><STRONG><a name="[44]"></a>EnterMemuSixOptionFive</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, screendriver.o(i.EnterMemuSixOptionFive))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EnterMemuSixOptionFive &rArr; SetflashTime &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetflashTime
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScreen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screenshow.o(.data)
</UL>
<P><STRONG><a name="[43]"></a>EnterMemuSixOptionFour</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, screendriver.o(i.EnterMemuSixOptionFour))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EnterMemuSixOptionFour &rArr; SetflashTime &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetflashTime
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScreen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screenshow.o(.data)
</UL>
<P><STRONG><a name="[40]"></a>EnterMemuSixOptionOne</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, screendriver.o(i.EnterMemuSixOptionOne))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EnterMemuSixOptionOne &rArr; SetflashTime &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetflashTime
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScreen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screenshow.o(.data)
</UL>
<P><STRONG><a name="[45]"></a>EnterMemuSixOptionSix</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, screendriver.o(i.EnterMemuSixOptionSix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EnterMemuSixOptionSix &rArr; SetflashTime &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetflashTime
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScreen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screenshow.o(.data)
</UL>
<P><STRONG><a name="[42]"></a>EnterMemuSixOptionThree</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, screendriver.o(i.EnterMemuSixOptionThree))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EnterMemuSixOptionThree &rArr; SetflashTime &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetflashTime
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScreen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screenshow.o(.data)
</UL>
<P><STRONG><a name="[41]"></a>EnterMemuSixOptionTwo</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, screendriver.o(i.EnterMemuSixOptionTwo))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EnterMemuSixOptionTwo &rArr; SetflashTime &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetflashTime
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScreen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screenshow.o(.data)
</UL>
<P><STRONG><a name="[24]"></a>EnterMemuThreeOptionFour</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, screendriver.o(i.EnterMemuThreeOptionFour))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EnterMemuThreeOptionFour &rArr; SetflashTime &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetflashTime
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScreen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screenshow.o(.data)
</UL>
<P><STRONG><a name="[21]"></a>EnterMemuThreeOptionOne</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, screendriver.o(i.EnterMemuThreeOptionOne))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EnterMemuThreeOptionOne &rArr; SetflashTime &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetflashTime
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScreen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screenshow.o(.data)
</UL>
<P><STRONG><a name="[23]"></a>EnterMemuThreeOptionThree</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, screendriver.o(i.EnterMemuThreeOptionThree))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EnterMemuThreeOptionThree &rArr; SetflashTime &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetflashTime
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScreen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screenshow.o(.data)
</UL>
<P><STRONG><a name="[22]"></a>EnterMemuThreeOptionTwo</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, screendriver.o(i.EnterMemuThreeOptionTwo))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EnterMemuThreeOptionTwo &rArr; SetflashTime &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetflashTime
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScreen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screenshow.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>EnterMemuTwoOptionFive</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, screendriver.o(i.EnterMemuTwoOptionFive))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EnterMemuTwoOptionFive &rArr; SetflashTime &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetflashTime
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScreen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screenshow.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>EnterMemuTwoOptionFour</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, screendriver.o(i.EnterMemuTwoOptionFour))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EnterMemuTwoOptionFour &rArr; SetflashTime &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetflashTime
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScreen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screenshow.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>EnterMemuTwoOptionOne</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, screendriver.o(i.EnterMemuTwoOptionOne))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EnterMemuTwoOptionOne &rArr; SetflashTime &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetflashTime
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScreen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screenshow.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>EnterMemuTwoOptionThree</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, screendriver.o(i.EnterMemuTwoOptionThree))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EnterMemuTwoOptionThree &rArr; SetflashTime &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetflashTime
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScreen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screenshow.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>EnterMemuTwoOptionTwo</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, screendriver.o(i.EnterMemuTwoOptionTwo))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EnterMemuTwoOptionTwo &rArr; SetflashTime &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetflashTime
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScreen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screenshow.o(.data)
</UL>
<P><STRONG><a name="[11a]"></a>FlashGetTorquePattern</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, pclink.o(i.FlashGetTorquePattern))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FlashGetTorquePattern &rArr; MX25L6406_Read &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25L6406_Read
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTarget
</UL>

<P><STRONG><a name="[11c]"></a>FlashReadGear</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, pclink.o(i.FlashReadGear))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FlashReadGear &rArr; MX25L6406_Read &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25L6406_Read
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTarget
</UL>

<P><STRONG><a name="[11d]"></a>FlashReadScreenVar</STRONG> (Thumb, 276 bytes, Stack size 16 bytes, pclink.o(i.FlashReadScreenVar))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FlashReadScreenVar &rArr; MX25L6406_Read &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25L6406_Read
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTarget
</UL>

<P><STRONG><a name="[11e]"></a>FlashReadupComputerStruct</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, pclink.o(i.FlashReadupComputerStruct))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FlashReadupComputerStruct &rArr; MX25L6406_Read &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25L6406_Read
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTarget
</UL>

<P><STRONG><a name="[135]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, stm32f10x_gpio.o(i.GPIO_EXTILineConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Input_Init
</UL>

<P><STRONG><a name="[ed]"></a>GPIO_Init</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, stm32f10x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Init
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_Init
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Init
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25L6406_Init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_RESAT_PIN
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_Init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS8688_IO_Init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Input_Init
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC8771_Init
</UL>

<P><STRONG><a name="[ee]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 138 bytes, Stack size 20 bytes, stm32f10x_gpio.o(i.GPIO_PinRemapConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinRemapConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS8688_IO_Init
</UL>

<P><STRONG><a name="[f9]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskKeyControl
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueryInterrupt
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS8688_SPI_Read8Bit
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC8771_Read_CMD
</UL>

<P><STRONG><a name="[f6]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25L6406_Read
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi374Start
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_RESAT_PIN
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_Init
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_AUTO_RST_Mode_Data
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS8688_WriteReg
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS8688_WriteCmd
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS8688_SPI_Write8Bit
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS8688_SPI_Read8Bit
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS8688_ReadReg
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS8688_Init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC8771_init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC8771_WRITE_CMD
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC8771_Read_CMD
</UL>

<P><STRONG><a name="[ef]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25L6406_Read
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi374Stop
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25L6406_Init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_AUTO_RST_Mode_Data
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS8688_WriteReg
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS8688_WriteCmd
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS8688_SPI_Write8Bit
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS8688_SPI_Read8Bit
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS8688_ReadReg
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS8688_Init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS8688_IO_Init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC8771_init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC8771_WRITE_CMD
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC8771_Read_CMD
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC8771_Init
</UL>

<P><STRONG><a name="[e5]"></a>Get_AUTO_RST_Mode_Data</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, ads8688.o(i.Get_AUTO_RST_Mode_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Get_AUTO_RST_Mode_Data &rArr; ADS8688_SPI_Write8Bit
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS8688_SPI_Write8Bit
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS8688_SPI_Read8Bit
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS8688_CollectTask
</UL>

<P><STRONG><a name="[48]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[11f]"></a>IWDG_FeedDog</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, iwdg.o(i.IWDG_FeedDog))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IWDG_FeedDog
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskDog
</UL>

<P><STRONG><a name="[120]"></a>IWDG_ReloadCounter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(i.IWDG_ReloadCounter))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_FeedDog
</UL>

<P><STRONG><a name="[121]"></a>InitTarget</STRONG> (Thumb, 650 bytes, Stack size 40 bytes, system.o(i.InitTarget))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = InitTarget &rArr; DAC8771_Init &rArr; DAC8771_init &rArr; DAC8771_Read_CMD &rArr; DAC8771_WRITE_CMD
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntEn
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDis
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25L6406_ReadU32
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25L6406_Read
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mStopIfError
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_Init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374LibInit
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_Init
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25L6406_ReadU16
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25L6406_Init
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_RESAT_PIN
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_Init
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBoltGardeMeterArr
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Init
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CH_Range
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTO_RST_Mode
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS8688_Init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Input_Init
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC8771_Init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashReadupComputerStruct
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashReadScreenVar
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashReadGear
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashGetTorquePattern
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[128]"></a>Input_Init</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, exti.o(i.Input_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Input_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTarget
</UL>

<P><STRONG><a name="[17d]"></a>Is_Leap_Year</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, rtc.o(i.Is_Leap_Year))
<BR><BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDayValVarFlag
</UL>

<P><STRONG><a name="[12a]"></a>KEY_Init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, led.o(i.KEY_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = KEY_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTarget
</UL>

<P><STRONG><a name="[129]"></a>LED_Init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, led.o(i.LED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LED_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTarget
</UL>

<P><STRONG><a name="[12d]"></a>MX25L6406_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, mx25l.o(i.MX25L6406_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MX25L6406_Init &rArr; SPI1_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTarget
</UL>

<P><STRONG><a name="[11b]"></a>MX25L6406_Read</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, mx25l.o(i.MX25L6406_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MX25L6406_Read &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTarget
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25L6406_ReadU32
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25L6406_ReadU16
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBoltGardeMeterArr
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashReadupComputerStruct
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashReadScreenVar
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashReadGear
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashGetTorquePattern
</UL>

<P><STRONG><a name="[131]"></a>MX25L6406_ReadU16</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, mx25l.o(i.MX25L6406_ReadU16))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MX25L6406_ReadU16 &rArr; MX25L6406_Read &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25L6406_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTarget
</UL>

<P><STRONG><a name="[130]"></a>MX25L6406_ReadU32</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, mx25l.o(i.MX25L6406_ReadU32))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MX25L6406_ReadU32 &rArr; MX25L6406_Read &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25L6406_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTarget
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25L6406_ReadU32ARR
</UL>

<P><STRONG><a name="[139]"></a>MX25L6406_ReadU32ARR</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, mx25l.o(i.MX25L6406_ReadU32ARR))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MX25L6406_ReadU32ARR &rArr; MX25L6406_ReadU32 &rArr; MX25L6406_Read &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25L6406_ReadU32
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBoltGardeMeterArr
</UL>

<P><STRONG><a name="[49]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>MemuFive</STRONG> (Thumb, 648 bytes, Stack size 56 bytes, screendriver.o(i.MemuFive))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = MemuFive &rArr; getOutData &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getOutData
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTextValue
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTextInt32
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScreen
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetControlForeColor
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screenshow.o(.data)
</UL>
<P><STRONG><a name="[29]"></a>MemuFiveOptionFour</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, screendriver.o(i.MemuFiveOptionFour))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MemuFiveOptionFour &rArr; SetflashTime &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetflashTime
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScreen
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetControlForeColor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screenshow.o(.data)
</UL>
<P><STRONG><a name="[26]"></a>MemuFiveOptionOne</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, screendriver.o(i.MemuFiveOptionOne))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MemuFiveOptionOne &rArr; SetflashTime &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetflashTime
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScreen
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetControlForeColor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screenshow.o(.data)
</UL>
<P><STRONG><a name="[28]"></a>MemuFiveOptionThree</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, screendriver.o(i.MemuFiveOptionThree))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MemuFiveOptionThree &rArr; SetflashTime &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetflashTime
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScreen
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetControlForeColor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screenshow.o(.data)
</UL>
<P><STRONG><a name="[27]"></a>MemuFiveOptionTwo</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, screendriver.o(i.MemuFiveOptionTwo))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MemuFiveOptionTwo &rArr; SetflashTime &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetflashTime
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScreen
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetControlForeColor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screenshow.o(.data)
</UL>
<P><STRONG><a name="[2e]"></a>MemuFour</STRONG> (Thumb, 470 bytes, Stack size 56 bytes, screendriver.o(i.MemuFour))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = MemuFour &rArr; getOutData &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getOutData
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTextValue
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTextInt32
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScreen
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetControlForeColor
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screenshow.o(.data)
</UL>
<P><STRONG><a name="[33]"></a>MemuFourOptionFive</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, screendriver.o(i.MemuFourOptionFive))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MemuFourOptionFive &rArr; SetflashTime &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetflashTime
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScreen
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetControlForeColor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screenshow.o(.data)
</UL>
<P><STRONG><a name="[32]"></a>MemuFourOptionFour</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, screendriver.o(i.MemuFourOptionFour))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MemuFourOptionFour &rArr; SetflashTime &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetflashTime
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScreen
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetControlForeColor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screenshow.o(.data)
</UL>
<P><STRONG><a name="[2f]"></a>MemuFourOptionOne</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, screendriver.o(i.MemuFourOptionOne))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MemuFourOptionOne &rArr; SetflashTime &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetflashTime
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScreen
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetControlForeColor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screenshow.o(.data)
</UL>
<P><STRONG><a name="[31]"></a>MemuFourOptionThree</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, screendriver.o(i.MemuFourOptionThree))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MemuFourOptionThree &rArr; SetflashTime &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetflashTime
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScreen
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetControlForeColor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screenshow.o(.data)
</UL>
<P><STRONG><a name="[30]"></a>MemuFourOptionTwo</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, screendriver.o(i.MemuFourOptionTwo))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MemuFourOptionTwo &rArr; SetflashTime &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetflashTime
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScreen
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetControlForeColor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screenshow.o(.data)
</UL>
<P><STRONG><a name="[0]"></a>MemuOne</STRONG> (Thumb, 248 bytes, Stack size 48 bytes, screendriver.o(i.MemuOne))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = MemuOne &rArr; SetTextValue &rArr; SendStrings &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTextValue
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTextInt32
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScreen
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLanguage
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetControlForeColor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screenshow.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>MemuOneOptionEight</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, screendriver.o(i.MemuOneOptionEight))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MemuOneOptionEight &rArr; SetflashTime &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetflashTime
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScreen
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetControlForeColor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screenshow.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>MemuOneOptionFive</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, screendriver.o(i.MemuOneOptionFive))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MemuOneOptionFive &rArr; SetflashTime &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetflashTime
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScreen
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetControlForeColor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screenshow.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>MemuOneOptionFour</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, screendriver.o(i.MemuOneOptionFour))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MemuOneOptionFour &rArr; SetflashTime &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetflashTime
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScreen
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetControlForeColor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screenshow.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>MemuOneOptionOne</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, screendriver.o(i.MemuOneOptionOne))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MemuOneOptionOne &rArr; SetflashTime &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetflashTime
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScreen
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetControlForeColor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screenshow.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>MemuOneOptionSeven</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, screendriver.o(i.MemuOneOptionSeven))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MemuOneOptionSeven &rArr; SetflashTime &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetflashTime
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScreen
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetControlForeColor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screenshow.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>MemuOneOptionSix</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, screendriver.o(i.MemuOneOptionSix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MemuOneOptionSix &rArr; SetflashTime &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetflashTime
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScreen
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetControlForeColor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screenshow.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>MemuOneOptionThree</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, screendriver.o(i.MemuOneOptionThree))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MemuOneOptionThree &rArr; SetflashTime &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetflashTime
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScreen
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetControlForeColor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screenshow.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>MemuOneOptionTwo</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, screendriver.o(i.MemuOneOptionTwo))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MemuOneOptionTwo &rArr; SetflashTime &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetflashTime
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScreen
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetControlForeColor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screenshow.o(.data)
</UL>
<P><STRONG><a name="[39]"></a>MemuSix</STRONG> (Thumb, 638 bytes, Stack size 56 bytes, screendriver.o(i.MemuSix))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = MemuSix &rArr; setSensorPresetTorValVarFlag &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSensorPresetTorValVarFlag
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getOutData
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTextValue
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTextInt32
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScreen
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetControlForeColor
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screenshow.o(.data)
</UL>
<P><STRONG><a name="[3e]"></a>MemuSixOptionFive</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, screendriver.o(i.MemuSixOptionFive))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MemuSixOptionFive &rArr; SetflashTime &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetflashTime
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScreen
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetControlForeColor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screenshow.o(.data)
</UL>
<P><STRONG><a name="[3d]"></a>MemuSixOptionFour</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, screendriver.o(i.MemuSixOptionFour))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MemuSixOptionFour &rArr; SetflashTime &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetflashTime
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScreen
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetControlForeColor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screenshow.o(.data)
</UL>
<P><STRONG><a name="[3a]"></a>MemuSixOptionOne</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, screendriver.o(i.MemuSixOptionOne))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MemuSixOptionOne &rArr; SetflashTime &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetflashTime
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScreen
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetControlForeColor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screenshow.o(.data)
</UL>
<P><STRONG><a name="[3f]"></a>MemuSixOptionSix</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, screendriver.o(i.MemuSixOptionSix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MemuSixOptionSix &rArr; SetflashTime &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetflashTime
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScreen
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetControlForeColor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screenshow.o(.data)
</UL>
<P><STRONG><a name="[3c]"></a>MemuSixOptionThree</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, screendriver.o(i.MemuSixOptionThree))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MemuSixOptionThree &rArr; SetflashTime &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetflashTime
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScreen
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetControlForeColor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screenshow.o(.data)
</UL>
<P><STRONG><a name="[3b]"></a>MemuSixOptionTwo</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, screendriver.o(i.MemuSixOptionTwo))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MemuSixOptionTwo &rArr; SetflashTime &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetflashTime
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScreen
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetControlForeColor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screenshow.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>MemuThree</STRONG> (Thumb, 566 bytes, Stack size 56 bytes, screendriver.o(i.MemuThree))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = MemuThree &rArr; getOutData &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getOutData
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTextValue
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTextInt32
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScreen
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetControlForeColor
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screenshow.o(.data)
</UL>
<P><STRONG><a name="[20]"></a>MemuThreeOptionFour</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, screendriver.o(i.MemuThreeOptionFour))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MemuThreeOptionFour &rArr; SetflashTime &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetflashTime
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScreen
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetControlForeColor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screenshow.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>MemuThreeOptionOne</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, screendriver.o(i.MemuThreeOptionOne))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MemuThreeOptionOne &rArr; SetflashTime &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetflashTime
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScreen
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetControlForeColor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screenshow.o(.data)
</UL>
<P><STRONG><a name="[1f]"></a>MemuThreeOptionThree</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, screendriver.o(i.MemuThreeOptionThree))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MemuThreeOptionThree &rArr; SetflashTime &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetflashTime
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScreen
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetControlForeColor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screenshow.o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>MemuThreeOptionTwo</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, screendriver.o(i.MemuThreeOptionTwo))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MemuThreeOptionTwo &rArr; SetflashTime &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetflashTime
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScreen
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetControlForeColor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screenshow.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>MemuTwo</STRONG> (Thumb, 630 bytes, Stack size 56 bytes, screendriver.o(i.MemuTwo))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = MemuTwo &rArr; getOutData &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getOutData
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTextValue
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTextInt32
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScreen
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetControlForeColor
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screenshow.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>MemuTwoOptionFive</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, screendriver.o(i.MemuTwoOptionFive))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MemuTwoOptionFive &rArr; SetflashTime &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetflashTime
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScreen
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetControlForeColor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screenshow.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>MemuTwoOptionFour</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, screendriver.o(i.MemuTwoOptionFour))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MemuTwoOptionFour &rArr; SetflashTime &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetflashTime
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScreen
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetControlForeColor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screenshow.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>MemuTwoOptionOne</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, screendriver.o(i.MemuTwoOptionOne))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MemuTwoOptionOne &rArr; SetflashTime &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetflashTime
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScreen
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetControlForeColor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screenshow.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>MemuTwoOptionThree</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, screendriver.o(i.MemuTwoOptionThree))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MemuTwoOptionThree &rArr; SetflashTime &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetflashTime
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScreen
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetControlForeColor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screenshow.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>MemuTwoOptionTwo</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, screendriver.o(i.MemuTwoOptionTwo))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MemuTwoOptionTwo &rArr; SetflashTime &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetflashTime
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScreen
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetControlForeColor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screenshow.o(.data)
</UL>
<P><STRONG><a name="[114]"></a>ModiVarAdd</STRONG> (Thumb, 8980 bytes, Stack size 80 bytes, screenshow.o(i.ModiVarAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = ModiVarAdd &rArr; setSensorPresetTorValVarFlag &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSensorPresetTorValVarFlag
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getOutData
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTextValue
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTextInt32
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setYearValVarFlag
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTargetTorqueValVarFlag
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSecondValVarFlag
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMonthValVarFlag
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMinuteValVarFlag
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLangChartFlag
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setHourValVarFlag
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDayValVarFlag
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBoltGradeValVarFlag
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPressValue
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBoltGardeMeterArr
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskKeyControl
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[116]"></a>ModiVarAddWide</STRONG> (Thumb, 8824 bytes, Stack size 80 bytes, screenshow.o(i.ModiVarAddWide))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = ModiVarAddWide &rArr; setSensorPresetTorValVarFlag &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSensorPresetTorValVarFlag
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getOutData
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTextValue
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTextInt32
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setYearValVarFlag
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTargetTorqueValVarFlag
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSecondValVarFlag
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMonthValVarFlag
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMinuteValVarFlag
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLangChartFlag
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setHourValVarFlag
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDayValVarFlag
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBoltGradeValVarFlag
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPressValue
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBoltGardeMeterArr
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[113]"></a>ModiVarDec</STRONG> (Thumb, 8960 bytes, Stack size 88 bytes, screenshow.o(i.ModiVarDec))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ModiVarDec &rArr; setSensorPresetTorValVarFlag &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSensorPresetTorValVarFlag
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getOutData
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTextValue
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTextInt32
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setYearValVarFlag
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTargetTorqueValVarFlag
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSecondValVarFlag
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMonthValVarFlag
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMinuteValVarFlag
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLangChartFlag
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setHourValVarFlag
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDayValVarFlag
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBoltGradeValVarFlag
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPressValue
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBoltGardeMeterArr
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskKeyControl
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[115]"></a>ModiVarDecWide</STRONG> (Thumb, 8854 bytes, Stack size 80 bytes, screenshow.o(i.ModiVarDecWide))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = ModiVarDecWide &rArr; setSensorPresetTorValVarFlag &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSensorPresetTorValVarFlag
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getOutData
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTextValue
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTextInt32
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setYearValVarFlag
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTargetTorqueValVarFlag
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSecondValVarFlag
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMonthValVarFlag
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMinuteValVarFlag
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLangChartFlag
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setHourValVarFlag
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDayValVarFlag
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBoltGradeValVarFlag
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPressValue
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBoltGardeMeterArr
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[47]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[124]"></a>NVIC_Configuration</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, system.o(i.NVIC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTarget
</UL>

<P><STRONG><a name="[14e]"></a>NVIC_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[14d]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[14f]"></a>OSInit</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, os_core.o(i.OSInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = OSInit &rArr; OS_InitTaskStat &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QInit
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagInit
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitHookEnd
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitHookBegin
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskStat
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskIdle
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTCBList
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitRdyList
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitMisc
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitEventList
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[150]"></a>OSInitHookBegin</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSInitHookBegin))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[159]"></a>OSInitHookEnd</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSInitHookEnd))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[19e]"></a>OSIntEnter</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, os_core.o(i.OSIntEnter))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[90]"></a>OSIntExit</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, os_core.o(i.OSIntExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntCtxSw
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_cpu_a.o(.text)
</UL>
<P><STRONG><a name="[15e]"></a>OSStart</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, os_core.o(i.OSStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSStart
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStartHighRdy
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16f]"></a>OSTCBInitHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTCBInitHook))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
</UL>

<P><STRONG><a name="[160]"></a>OSTaskCreateExt</STRONG> (Thumb, 172 bytes, Stack size 56 bytes, os_task.o(i.OSTaskCreateExt))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkInit
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStkClr
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStart
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskStat
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskIdle
</UL>

<P><STRONG><a name="[170]"></a>OSTaskCreateHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTaskCreateHook))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
</UL>

<P><STRONG><a name="[171]"></a>OSTaskIdleHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTaskIdleHook))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
</UL>

<P><STRONG><a name="[165]"></a>OSTaskNameSet</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, os_task.o(i.OSTaskNameSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSTaskNameSet
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrLen
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskStat
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskIdle
</UL>

<P><STRONG><a name="[168]"></a>OSTaskResume</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, os_task.o(i.OSTaskResume))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSTaskResume &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskKeyControl
</UL>

<P><STRONG><a name="[172]"></a>OSTaskStatHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTaskStatHook))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[169]"></a>OSTaskStkChk</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, os_task.o(i.OSTaskStkChk))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSTaskStkChk
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStatStkChk
</UL>

<P><STRONG><a name="[162]"></a>OSTaskStkInit</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, os_cpu_c.o(i.OSTaskStkInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OSTaskStkInit
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[16a]"></a>OSTaskSuspend</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, os_task.o(i.OSTaskSuspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSTaskSuspend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskKeyControl
</UL>

<P><STRONG><a name="[8f]"></a>OSTaskSwHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTaskSwHook))
<BR>[Address Reference Count : 1]<UL><LI> os_cpu_a.o(.text)
</UL>
<P><STRONG><a name="[13a]"></a>OSTimeDly</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, os_time.o(i.OSTimeDly))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskKeyControl
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskDog
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStart
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuTwo
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuThree
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuSix
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuOne
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuFour
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuFive
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1Write
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[16b]"></a>OSTimeTick</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, os_core.o(i.OSTimeTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSTimeTick
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTickHook
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[16c]"></a>OSTimeTickHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTimeTickHook))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
</UL>

<P><STRONG><a name="[155]"></a>OS_FlagInit</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, os_flag.o(i.OS_FlagInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_FlagInit
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[16d]"></a>OS_MemClr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, os_core.o(i.OS_MemClr))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QInit
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagInit
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTCBList
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitEventList
</UL>

<P><STRONG><a name="[156]"></a>OS_QInit</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, os_q.o(i.OS_QInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_QInit
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[164]"></a>OS_Sched</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, os_core.o(i.OS_Sched))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCtxSw
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
</UL>

<P><STRONG><a name="[167]"></a>OS_StrCopy</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, os_core.o(i.OS_StrCopy))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
</UL>

<P><STRONG><a name="[166]"></a>OS_StrLen</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, os_core.o(i.OS_StrLen))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
</UL>

<P><STRONG><a name="[163]"></a>OS_TCBInit</STRONG> (Thumb, 256 bytes, Stack size 40 bytes, os_core.o(i.OS_TCBInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateHook
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTCBInitHook
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[91]"></a>OS_TaskIdle</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, os_core.o(i.OS_TaskIdle))
<BR><BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskIdleHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_core.o(i.OS_InitTaskIdle)
</UL>
<P><STRONG><a name="[92]"></a>OS_TaskStat</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, os_core.o(i.OS_TaskStat))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = OS_TaskStat &rArr; OS_TaskStatStkChk &rArr; OSTaskStkChk
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStatHook
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStatStkChk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_core.o(i.OS_InitTaskStat)
</UL>
<P><STRONG><a name="[173]"></a>OS_TaskStatStkChk</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, os_core.o(i.OS_TaskStatStkChk))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = OS_TaskStatStkChk &rArr; OSTaskStkChk
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[161]"></a>OS_TaskStkClr</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, os_task.o(i.OS_TaskStkClr))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[182]"></a>PWR_BackupAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_pwr.o(i.PWR_BackupAccessCmd))
<BR><BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[174]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_AHBPeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[175]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_Init
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[ff]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_Init
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[fd]"></a>RCC_BackupResetCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_BackupResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_DeInit
</UL>

<P><STRONG><a name="[123]"></a>RCC_Configuration</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, system.o(i.RCC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_Configuration
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTarget
</UL>

<P><STRONG><a name="[1ab]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, stm32f10x_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[185]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f10x_rcc.o(i.RCC_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[184]"></a>RCC_LSEConfig</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_LSEConfig))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[187]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_RTCCLKCmd))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[186]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_RTCCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[176]"></a>RS485_Init</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, rs485.o(i.RS485_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = RS485_Init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[180]"></a>RTC_ClearITPendingBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_rtc.o(i.RTC_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[18a]"></a>RTC_EnterConfigMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rtc.o(i.RTC_EnterConfigMode))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetPrescaler
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetCounter
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[18d]"></a>RTC_ExitConfigMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rtc.o(i.RTC_ExitConfigMode))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetPrescaler
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetCounter
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[17b]"></a>RTC_Get</STRONG> (Thumb, 240 bytes, Stack size 16 bytes, rtc.o(i.RTC_Get))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RTC_Get &rArr; RTC_Get_Week
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetCounter
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get_Week
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_Leap_Year
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[17c]"></a>RTC_GetCounter</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rtc.o(i.RTC_GetCounter))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get
</UL>

<P><STRONG><a name="[17f]"></a>RTC_GetITStatus</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f10x_rtc.o(i.RTC_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[17e]"></a>RTC_Get_Week</STRONG> (Thumb, 116 bytes, Stack size 20 bytes, rtc.o(i.RTC_Get_Week))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RTC_Get_Week
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get
</UL>

<P><STRONG><a name="[53]"></a>RTC_IRQHandler</STRONG> (Thumb, 312 bytes, Stack size 8 bytes, rtc.o(i.RTC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = RTC_IRQHandler &rArr; RTC_Get &rArr; RTC_Get_Week
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForLastTask
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetITStatus
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClearITPendingBit
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTextInt32
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[189]"></a>RTC_ITConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rtc.o(i.RTC_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[12e]"></a>RTC_Init</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, rtc.o(i.RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = RTC_Init &rArr; RTC_Set &rArr; RTC_SetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKConfig
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKCmd
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_LSEConfig
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_WriteBackupRegister
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_ReadBackupRegister
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_DeInit
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForLastTask
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetPrescaler
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ITConfig
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitConfigMode
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterConfigMode
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTarget
</UL>

<P><STRONG><a name="[18c]"></a>RTC_Set</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, rtc.o(i.RTC_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = RTC_Set &rArr; RTC_SetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForLastTask
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetCounter
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_Leap_Year
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setYearValVarFlag
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSecondValVarFlag
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMonthValVarFlag
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMinuteValVarFlag
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setHourValVarFlag
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDayValVarFlag
</UL>

<P><STRONG><a name="[18f]"></a>RTC_SetCounter</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, stm32f10x_rtc.o(i.RTC_SetCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RTC_SetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitConfigMode
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterConfigMode
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set
</UL>

<P><STRONG><a name="[18b]"></a>RTC_SetPrescaler</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, stm32f10x_rtc.o(i.RTC_SetPrescaler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RTC_SetPrescaler
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitConfigMode
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterConfigMode
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[181]"></a>RTC_WaitForLastTask</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rtc.o(i.RTC_WaitForLastTask))
<BR><BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[188]"></a>RTC_WaitForSynchro</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f10x_rtc.o(i.RTC_WaitForSynchro))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[132]"></a>ReadBoltGardeMeterArr</STRONG> (Thumb, 794 bytes, Stack size 56 bytes, pclink.o(i.ReadBoltGardeMeterArr))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ReadBoltGardeMeterArr &rArr; MX25L6406_ReadU32ARR &rArr; MX25L6406_ReadU32 &rArr; MX25L6406_Read &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25L6406_Read
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25L6406_ReadU32ARR
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTarget
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModiVarDecWide
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModiVarDec
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModiVarAddWide
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModiVarAdd
</UL>

<P><STRONG><a name="[f1]"></a>SOFT_RESET</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ads8688.o(i.SOFT_RESET))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SOFT_RESET &rArr; ADS8688_WriteCmd &rArr; ADS8688_SPI_Write8Bit
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS8688_WriteCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS8688_Init
</UL>

<P><STRONG><a name="[137]"></a>SPI1_Init</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, mx25l.o(i.SPI1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SPI1_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25L6406_Init
</UL>

<P><STRONG><a name="[138]"></a>SPI1_ReadWriteByte</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, mx25l.o(i.SPI1_ReadWriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25L6406_Read
</UL>

<P><STRONG><a name="[103]"></a>SPI2_Init</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, ch374drv.o(i.SPI2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SPI2_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_Init
</UL>

<P><STRONG><a name="[105]"></a>SPI3_TransByte</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, ch374drv.o(i.SPI3_TransByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI3_TransByte
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi374Start
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_WRITE_REGISTER
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_WRITE_BLOCK_C
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_WRITE_BLOCK64
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_WRITE_BLOCK
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_READ_REGISTER
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_READ_BLOCK64
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_READ_BLOCK
</UL>

<P><STRONG><a name="[194]"></a>SPI_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
</UL>

<P><STRONG><a name="[195]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_TransByte
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>

<P><STRONG><a name="[197]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_TransByte
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>

<P><STRONG><a name="[196]"></a>SPI_I2S_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_TransByte
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>

<P><STRONG><a name="[193]"></a>SPI_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
</UL>

<P><STRONG><a name="[4c]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[198]"></a>SendChar</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, uart.o(i.SendChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetflashTime
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTextValue
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTextInt32
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScreen
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLanguage
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetControlForeColor
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStrings
</UL>

<P><STRONG><a name="[19b]"></a>SendStrings</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, uart.o(i.SendStrings))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SendStrings &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTextValue
</UL>

<P><STRONG><a name="[140]"></a>SetControlForeColor</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, screendriver.o(i.SetControlForeColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SetControlForeColor &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuTwoOptionTwo
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuTwoOptionThree
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuTwoOptionOne
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuTwoOptionFour
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuTwoOptionFive
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuTwo
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuThreeOptionTwo
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuThreeOptionThree
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuThreeOptionOne
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuThreeOptionFour
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuThree
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuSixOptionTwo
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuSixOptionThree
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuSixOptionSix
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuSixOptionOne
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuSixOptionFour
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuSixOptionFive
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuSix
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuOneOptionTwo
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuOneOptionThree
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuOneOptionSix
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuOneOptionSeven
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuOneOptionOne
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuOneOptionFour
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuOneOptionFive
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuOneOptionEight
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuOne
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuFourOptionTwo
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuFourOptionThree
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuFourOptionOne
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuFourOptionFour
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuFourOptionFive
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuFour
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuFiveOptionTwo
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuFiveOptionThree
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuFiveOptionOne
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuFiveOptionFour
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuFive
</UL>

<P><STRONG><a name="[141]"></a>SetLanguage</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, screendriver.o(i.SetLanguage))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SetLanguage &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuOne
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLangChartFlag
</UL>

<P><STRONG><a name="[118]"></a>SetScreen</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, screendriver.o(i.SetScreen))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SetScreen &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuTwoOptionTwo
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuTwoOptionThree
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuTwoOptionOne
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuTwoOptionFour
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuTwoOptionFive
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuTwo
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuThreeOptionTwo
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuThreeOptionThree
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuThreeOptionOne
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuThreeOptionFour
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuThree
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuSixOptionTwo
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuSixOptionThree
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuSixOptionSix
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuSixOptionOne
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuSixOptionFour
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuSixOptionFive
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuSix
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuOneOptionTwo
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuOneOptionThree
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuOneOptionSix
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuOneOptionSeven
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuOneOptionOne
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuOneOptionFour
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuOneOptionFive
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuOneOptionEight
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuOne
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuFourOptionTwo
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuFourOptionThree
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuFourOptionOne
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuFourOptionFour
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuFourOptionFive
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuFour
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuFiveOptionTwo
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuFiveOptionThree
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuFiveOptionOne
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuFiveOptionFour
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuFive
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterMemuTwoOptionTwo
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterMemuTwoOptionThree
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterMemuTwoOptionOne
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterMemuTwoOptionFour
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterMemuTwoOptionFive
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterMemuThreeOptionTwo
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterMemuThreeOptionThree
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterMemuThreeOptionOne
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterMemuThreeOptionFour
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterMemuSixOptionTwo
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterMemuSixOptionThree
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterMemuSixOptionSix
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterMemuSixOptionOne
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterMemuSixOptionFour
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterMemuSixOptionFive
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterMemuOneOptionTwo
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterMemuOneOptionThree
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterMemuOneOptionSix
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterMemuOneOptionSeven
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterMemuOneOptionOne
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterMemuOneOptionFour
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterMemuOneOptionFive
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterMemuOneOptionEight
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterMemuFourOptionTwo
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterMemuFourOptionThree
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterMemuFourOptionOne
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterMemuFourOptionFour
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterMemuFourOptionFive
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterMemuFiveOptionTwo
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterMemuFiveOptionThree
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterMemuFiveOptionOne
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterMemuFiveOptionFour
</UL>

<P><STRONG><a name="[13c]"></a>SetTextInt32</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, screendriver.o(i.SetTextInt32))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SetTextInt32 &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuTwo
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuThree
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuSix
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuOne
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuFour
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuFive
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setYearValVarFlag
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSecondValVarFlag
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMonthValVarFlag
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMinuteValVarFlag
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setHourValVarFlag
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDayValVarFlag
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModiVarDecWide
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModiVarDec
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModiVarAddWide
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModiVarAdd
</UL>

<P><STRONG><a name="[13b]"></a>SetTextValue</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, screendriver.o(i.SetTextValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SetTextValue &rArr; SendStrings &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStrings
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuTwo
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuThree
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuSix
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuOne
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuFour
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuFive
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLangChartFlag
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModiVarDecWide
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModiVarDec
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModiVarAddWide
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModiVarAdd
</UL>

<P><STRONG><a name="[f2]"></a>Set_Auto_Scan_Sequence</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ads8688.o(i.Set_Auto_Scan_Sequence))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Set_Auto_Scan_Sequence &rArr; ADS8688_WriteReg &rArr; ADS8688_SPI_Write8Bit
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS8688_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS8688_Init
</UL>

<P><STRONG><a name="[12c]"></a>Set_CH_Range</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ads8688.o(i.Set_CH_Range))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Set_CH_Range &rArr; ADS8688_WriteReg &rArr; ADS8688_SPI_Write8Bit
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS8688_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTarget
</UL>

<P><STRONG><a name="[119]"></a>SetflashTime</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, screendriver.o(i.SetflashTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SetflashTime &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuTwoOptionTwo
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuTwoOptionThree
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuTwoOptionOne
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuTwoOptionFour
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuTwoOptionFive
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuThreeOptionTwo
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuThreeOptionThree
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuThreeOptionOne
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuThreeOptionFour
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuSixOptionTwo
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuSixOptionThree
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuSixOptionSix
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuSixOptionOne
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuSixOptionFour
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuSixOptionFive
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuOneOptionTwo
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuOneOptionThree
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuOneOptionSix
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuOneOptionSeven
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuOneOptionOne
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuOneOptionFour
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuOneOptionFive
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuOneOptionEight
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuFourOptionTwo
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuFourOptionThree
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuFourOptionOne
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuFourOptionFour
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuFourOptionFive
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuFiveOptionTwo
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuFiveOptionThree
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuFiveOptionOne
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuFiveOptionFour
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterMemuTwoOptionTwo
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterMemuTwoOptionThree
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterMemuTwoOptionOne
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterMemuTwoOptionFour
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterMemuTwoOptionFive
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterMemuThreeOptionTwo
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterMemuThreeOptionThree
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterMemuThreeOptionOne
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterMemuThreeOptionFour
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterMemuSixOptionTwo
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterMemuSixOptionThree
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterMemuSixOptionSix
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterMemuSixOptionOne
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterMemuSixOptionFour
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterMemuSixOptionFive
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterMemuOneOptionTwo
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterMemuOneOptionThree
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterMemuOneOptionSix
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterMemuOneOptionSeven
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterMemuOneOptionOne
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterMemuOneOptionFour
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterMemuOneOptionFive
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterMemuOneOptionEight
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterMemuFourOptionTwo
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterMemuFourOptionThree
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterMemuFourOptionOne
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterMemuFourOptionFour
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterMemuFourOptionFive
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterMemuFiveOptionTwo
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterMemuFiveOptionThree
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterMemuFiveOptionOne
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterMemuFiveOptionFour
</UL>

<P><STRONG><a name="[104]"></a>Spi374Start</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ch374drv.o(i.Spi374Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Spi374Start &rArr; SPI3_TransByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_TransByte
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_WRITE_REGISTER
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_WRITE_BLOCK_C
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_WRITE_BLOCK64
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_WRITE_BLOCK
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_READ_REGISTER
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_READ_BLOCK64
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_READ_BLOCK
</UL>

<P><STRONG><a name="[106]"></a>Spi374Stop</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ch374drv.o(i.Spi374Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Spi374Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_WRITE_REGISTER
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_WRITE_BLOCK_C
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_WRITE_BLOCK64
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_WRITE_BLOCK
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_READ_REGISTER
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_READ_BLOCK64
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_READ_BLOCK
</UL>

<P><STRONG><a name="[19f]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, misc.o(i.SysTick_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Init
</UL>

<P><STRONG><a name="[4f]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, systick.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = SysTick_Handler &rArr; OSTimeTick
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[12b]"></a>SysTick_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, systick.o(i.SysTick_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CLKSourceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTarget
</UL>

<P><STRONG><a name="[8d]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[6c]"></a>TIM2_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, rs485.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartRxMonitor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[126]"></a>TIM2_Init</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, rs485.o(i.TIM2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM2_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTarget
</UL>

<P><STRONG><a name="[6e]"></a>TIM4_IRQHandler</STRONG> (Thumb, 62 bytes, Stack size 400 bytes, rs485.o(i.TIM4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = TIM4_IRQHandler &rArr; ADS8688_CollectTask &rArr; averageValueTomA &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS8688_CollectTask
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[127]"></a>TIM4_Init</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, rs485.o(i.TIM4_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM4_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTarget
</UL>

<P><STRONG><a name="[1a1]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_Init
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[1a4]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskKeyControl
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_Init
</UL>

<P><STRONG><a name="[1a3]"></a>TIM_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_Init
</UL>

<P><STRONG><a name="[1a2]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_Init
</UL>

<P><STRONG><a name="[94]"></a>TaskDog</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, iwdg.o(i.TaskDog))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = TaskDog &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_FeedDog
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.TaskStart)
</UL>
<P><STRONG><a name="[93]"></a>TaskKeyControl</STRONG> (Thumb, 560 bytes, Stack size 0 bytes, screenshow.o(i.TaskKeyControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = TaskKeyControl &rArr; ModiVarDec &rArr; setSensorPresetTorValVarFlag &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModiVarDec
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModiVarAdd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.TaskStart)
</UL>
<P><STRONG><a name="[96]"></a>TaskStart</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, main.o(i.TaskStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = TaskStart &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[1a5]"></a>UART1Write</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, uart.o(i.UART1Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = UART1Write &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntEn
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDis
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[1a6]"></a>UART1_Init</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, uart.o(i.UART1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = UART1_Init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_StructInit
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[1a8]"></a>UART3_Init</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, uart.o(i.UART3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = UART3_Init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_StructInit
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[76]"></a>USART2_IRQHandler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, rs485.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART2_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[179]"></a>USART_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Init
</UL>

<P><STRONG><a name="[178]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Init
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_Init
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Init
</UL>

<P><STRONG><a name="[1b4]"></a>USART_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[19a]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>

<P><STRONG><a name="[1a9]"></a>USART_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f10x_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[17a]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f10x_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Init
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_Init
</UL>

<P><STRONG><a name="[177]"></a>USART_Init</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, stm32f10x_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Init
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_Init
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Init
</UL>

<P><STRONG><a name="[1aa]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[199]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>

<P><STRONG><a name="[1a7]"></a>USART_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_Init
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Init
</UL>

<P><STRONG><a name="[1a0]"></a>UartRxMonitor</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, rs485.o(i.UartRxMonitor))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[4b]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1ac]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1cb]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[f5]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskDog
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTarget
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mStopIfError
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_Init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS8688_Init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC8771_init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashReadupComputerStruct
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashReadScreenVar
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashReadGear
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashGetTorquePattern
</UL>

<P><STRONG><a name="[1cc]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[1cd]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[1ce]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1cf]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1d0]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[10b]"></a>delay_ms</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, systick.o(i.delay_ms))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC8771_init
</UL>

<P><STRONG><a name="[95]"></a>fputc</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, uart.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = fputc &rArr; UART1Write &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[13f]"></a>getOutData</STRONG> (Thumb, 176 bytes, Stack size 56 bytes, screencore.o(i.getOutData))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = getOutData &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuTwo
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuThree
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuSix
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuFour
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuFive
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModiVarDecWide
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModiVarDec
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModiVarAddWide
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModiVarAdd
</UL>

<P><STRONG><a name="[14c]"></a>getPressValue</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, screencore.o(i.getPressValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = getPressValue &rArr; __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSensorPresetTorValVarFlag
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTargetTorqueValVarFlag
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModiVarDecWide
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModiVarDec
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModiVarAddWide
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModiVarAdd
</UL>

<P><STRONG><a name="[12f]"></a>mStopIfError</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ch374drv.o(i.mStopIfError))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mStopIfError &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTarget
</UL>

<P><STRONG><a name="[8c]"></a>main</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = main &rArr; InitTarget &rArr; DAC8771_Init &rArr; DAC8771_init &rArr; DAC8771_Read_CMD &rArr; DAC8771_WRITE_CMD
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTarget
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[14b]"></a>setBoltGradeValVarFlag</STRONG> (Thumb, 648 bytes, Stack size 32 bytes, screencore.o(i.setBoltGradeValVarFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = setBoltGradeValVarFlag &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModiVarDecWide
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModiVarDec
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModiVarAddWide
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModiVarAdd
</UL>

<P><STRONG><a name="[146]"></a>setDayValVarFlag</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, screencore.o(i.setDayValVarFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = setDayValVarFlag &rArr; RTC_Set &rArr; RTC_SetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTextInt32
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_Leap_Year
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModiVarDecWide
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModiVarDec
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModiVarAddWide
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModiVarAdd
</UL>

<P><STRONG><a name="[147]"></a>setHourValVarFlag</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, screencore.o(i.setHourValVarFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = setHourValVarFlag &rArr; RTC_Set &rArr; RTC_SetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTextInt32
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModiVarDecWide
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModiVarDec
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModiVarAddWide
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModiVarAdd
</UL>

<P><STRONG><a name="[143]"></a>setLangChartFlag</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, screencore.o(i.setLangChartFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = setLangChartFlag &rArr; SetTextValue &rArr; SendStrings &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTextValue
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLanguage
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModiVarDecWide
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModiVarDec
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModiVarAddWide
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModiVarAdd
</UL>

<P><STRONG><a name="[148]"></a>setMinuteValVarFlag</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, screencore.o(i.setMinuteValVarFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = setMinuteValVarFlag &rArr; RTC_Set &rArr; RTC_SetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTextInt32
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModiVarDecWide
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModiVarDec
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModiVarAddWide
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModiVarAdd
</UL>

<P><STRONG><a name="[145]"></a>setMonthValVarFlag</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, screencore.o(i.setMonthValVarFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = setMonthValVarFlag &rArr; RTC_Set &rArr; RTC_SetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTextInt32
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModiVarDecWide
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModiVarDec
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModiVarAddWide
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModiVarAdd
</UL>

<P><STRONG><a name="[149]"></a>setSecondValVarFlag</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, screencore.o(i.setSecondValVarFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = setSecondValVarFlag &rArr; RTC_Set &rArr; RTC_SetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTextInt32
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModiVarDecWide
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModiVarDec
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModiVarAddWide
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModiVarAdd
</UL>

<P><STRONG><a name="[142]"></a>setSensorPresetTorValVarFlag</STRONG> (Thumb, 818 bytes, Stack size 56 bytes, screencore.o(i.setSensorPresetTorValVarFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = setSensorPresetTorValVarFlag &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPressValue
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemuSix
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModiVarDecWide
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModiVarDec
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModiVarAddWide
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModiVarAdd
</UL>

<P><STRONG><a name="[14a]"></a>setTargetTorqueValVarFlag</STRONG> (Thumb, 244 bytes, Stack size 40 bytes, screencore.o(i.setTargetTorqueValVarFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = setTargetTorqueValVarFlag &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPressValue
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModiVarDecWide
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModiVarDec
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModiVarAddWide
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModiVarAdd
</UL>

<P><STRONG><a name="[144]"></a>setYearValVarFlag</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, screencore.o(i.setYearValVarFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = setYearValVarFlag &rArr; RTC_Set &rArr; RTC_SetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTextInt32
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModiVarDecWide
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModiVarDec
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModiVarAddWide
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModiVarAdd
</UL>

<P><STRONG><a name="[125]"></a>uart_init</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, uart.o(i.uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = uart_init &rArr; RS485_Init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Configuration
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_Init
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTarget
</UL>

<P><STRONG><a name="[b7]"></a>xDelayAfterWrite</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ch374drv.o(i.xDelayAfterWrite), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s07
</UL>

<P><STRONG><a name="[c4]"></a>xFileNameEnumer</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ch374drv.o(i.xFileNameEnumer), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374FileOpen
</UL>

<P><STRONG><a name="[9f]"></a>xQueryInterrupt</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ch374drv.o(i.xQueryInterrupt), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374HostTransact
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[19c]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[19d]"></a>SetSysClockTo72</STRONG> (Thumb, 214 bytes, Stack size 12 bytes, system_stm32f10x.o(i.SetSysClockTo72))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[e7]"></a>averageValueTomA</STRONG> (Thumb, 96 bytes, Stack size 56 bytes, ads8688.o(i.averageValueTomA))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = averageValueTomA &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS8688_CollectTask
</UL>

<P><STRONG><a name="[e6]"></a>averageValue_Fillter</STRONG> (Thumb, 168 bytes, Stack size 28 bytes, ads8688.o(i.averageValue_Fillter))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = averageValue_Fillter
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS8688_CollectTask
</UL>

<P><STRONG><a name="[ea]"></a>mAValueToAngleVal</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ads8688.o(i.mAValueToAngleVal))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS8688_CollectTask
</UL>

<P><STRONG><a name="[eb]"></a>mAValueToFlowVal</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, ads8688.o(i.mAValueToFlowVal))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = mAValueToFlowVal &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS8688_CollectTask
</UL>

<P><STRONG><a name="[e9]"></a>mAValueToPressVal</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, ads8688.o(i.mAValueToPressVal))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = mAValueToPressVal &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS8688_CollectTask
</UL>

<P><STRONG><a name="[154]"></a>OS_InitEventList</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, os_core.o(i.OS_InitEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OS_InitEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[151]"></a>OS_InitMisc</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, os_core.o(i.OS_InitMisc))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[152]"></a>OS_InitRdyList</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, os_core.o(i.OS_InitRdyList))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[153]"></a>OS_InitTCBList</STRONG> (Thumb, 86 bytes, Stack size 12 bytes, os_core.o(i.OS_InitTCBList))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OS_InitTCBList
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[157]"></a>OS_InitTaskIdle</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, os_core.o(i.OS_InitTaskIdle))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = OS_InitTaskIdle &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[158]"></a>OS_InitTaskStat</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, os_core.o(i.OS_InitTaskStat))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = OS_InitTaskStat &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[15b]"></a>OS_SchedNew</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, os_core.o(i.OS_SchedNew))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>

<P><STRONG><a name="[9b]"></a>CH374s29</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, CH374MAI.O(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CH374s29 &rArr; CH374_WRITE_REGISTER &rArr; Spi374Start &rArr; SPI3_TransByte
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_WRITE_REGISTER
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374Init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DiskConnect
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s13
</UL>

<P><STRONG><a name="[b0]"></a>CH374s27</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, CH374MAI.O(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DiskReady
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s22
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s25
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s13
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s26
</UL>

<P><STRONG><a name="[bd]"></a>CH374s02</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, CH374MAI.O(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s08
</UL>

<P><STRONG><a name="[a5]"></a>CH374s31</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, CH374MAI.O(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_WRITE_REGISTER
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_WRITE_BLOCK_C
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DiskConnect
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s22
</UL>

<P><STRONG><a name="[a4]"></a>CH374s30</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, CH374MAI.O(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_WRITE_REGISTER
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_WRITE_BLOCK_C
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374CtrlTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DiskConnect
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s22
</UL>

<P><STRONG><a name="[b9]"></a>CH374s26</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, CH374MAI.O(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DelaymS
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374BulkOnlyCmd
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s27
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DiskReady
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s25
</UL>

<P><STRONG><a name="[1ae]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1ad]"></a>_printf_core</STRONG> (Thumb, 1704 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[1b0]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1af]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
